Defining exchanges is very similar to defining queues. The following code illustrates how to define an exchange:
{code}
rabbitmq {
    queues = {
        exchange name: "example.exchange", type: "topic"
    }
}
{code}

The above example will create an exchange with the name *example.exchange* and of the type *topic*. Below is a list of all the options availble when creating exchanges:
{table}
*Property* | *Required* | *Description* | *Type* | *Default*
@arguments@ | | Extra arguments used to create the exchange. See the RabbitMQ documentation for more information. | @Map@ | _none_
@autoDelete@ | | Whether to automatically delete the exchange once there are no longer any queues bound to it. | @boolean@ | @false@
@durable@ | | Whether messages should be persisted to the disk on the RabbitMQ server to survive server restarts. | @boolean@ | @false@
@name@ | !/bullet_red.png! | Name of the exchange. | @String@ | _none_
@type@ | !/bullet_red.png! | One of "fanout", "topic", "direct", or "headers". | @String@| _none_
{table}

Queues can also be automatically bound to exchanges. The last parameter of the exchange function takes a closure to define queues inside the exchange. See the following example:
{code}
rabbitmq {
    queues = {
        exchange name: "example.exchange", type: "topic", {
            queue name: "example.queue", binding: "sample.binding.#"
        }
    }
}
{code}
This example will create a *topic* exchange named *example.exchange*, as well as create a queue named *example.queue*. The queue will be bound to the exchange with the topic or
routing key of "sample.binding.#".

Queues need to have their binding defined specifically for the type of exchange they are bound to.

h3. Fanout Exchanges
Fanout exchanges are the easiest to configure bindings for, since they require none. Fanout exchanges simply send every message it received to every queue bound to it.
{code}
rabbitmq {
    queues = {
        exchange name: "example.exchange", type: "fanout", {
            queue name: "example.queue"
        }
    }
}
{code}

h3. Topic Exchanges
Topic exchanges require queues to define a topic. Topics can be an exact match, but their strength is in their partial matching ability. See the RabbitMQ documentation for details about this kind of exchange.
{code}
rabbitmq {
    queues = {
        exchange name: "example.exchange", type: "topic", {
            queue name: "example.queue", binding: "exmaple.binding.#"
        }
    }
}
{code}

h3. Direct Exchanges
Direct exchanges are similar to topic exchanges, except that their "topics" only function with direct name matching. The appropriate name for the binding in this case is "routing key". Queues must define a
routing key when binding to this type of exchange.
{code}
rabbitmq {
    queues = {
        exchange name: "example.exchange", type: "direct", {
            queue name: "example.queue", binding: "exmapleRoutingKey"
        }
    }
}
{code}

h3. Header Exchanges
Header exchanges are like topic exchanges, but with the ability to define multiple match keywords. The binding for queues allows the queue to match on all or one of multiple header values. The queue must also
set the @match@ property for this exchange type, and the value must be one of "any" or "all".
{code}
rabbitmq {
    queues = {
        exchange name: "example.exchange", type: "headers", {
            queue name: "example.queue", match: "any", binding: [
                "header1": "header-value-1",
                "header2": "header-value-2"
            ]
        }
    }
}
{code}

